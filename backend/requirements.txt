Frontend - Sistema de Gestión de Reservas Aéreas
Descripción del Proyecto
El frontend de este sistema proporciona una interfaz de usuario intuitiva para la búsqueda y reserva de vuelos. Está desarrollado con HTML, CSS y JavaScript, sin frameworks adicionales, para una integración sencilla y ligera.

Instrucciones para la Instalación y Ejecución
Clonar el repositorio

sh
Copiar
Editar
git clone https://github.com/tu-usuario/gestion-reservas-aereas.git
cd gestion-reservas-aereas/frontend_visual
Ejecutar un servidor local
Puedes utilizar npx serve para desplegar el frontend:

sh
Copiar
Editar
npx serve
Esto iniciará un servidor en http://localhost:3000.

Abrir el navegador
Ingresa en http://localhost:3000 y visualiza la interfaz.

Ejemplos de Uso
Buscar un vuelo:

Ingresar la ciudad de origen y destino.

Seleccionar la fecha de viaje.

Presionar el botón "Buscar" para ver los vuelos disponibles.

Reservar un vuelo (requiere conexión con el backend).

Pruebas del Frontend
Dado que el frontend es una aplicación estática, se pueden realizar pruebas manuales, verificando:

Que los formularios acepten y validen datos correctamente.

Que los estilos CSS se apliquen correctamente.

Que el navegador no muestre errores en la consola (F12 > Console).

Backend - Sistema de Gestión de Reservas Aéreas
Descripción del Proyecto
El backend maneja la gestión de vuelos y reservas, proporcionando una API basada en FastAPI. Este sistema permite:

Consultar vuelos disponibles.

Realizar reservas.

Eliminar reservas.

La API está optimizada para alto rendimiento y proporciona documentación automática mediante Swagger.

Instrucciones para la Instalación y Ejecución
Clonar el repositorio

sh
Copiar
Editar
git clone https://github.com/tu-usuario/gestion-reservas-aereas.git
cd gestion-reservas-aereas/backend
Crear un entorno virtual y activarlo

sh
Copiar
Editar
python -m venv venv
En Windows:

sh
Copiar
Editar
venv\Scripts\activate
En macOS/Linux:

sh
Copiar
Editar
source venv/bin/activate
Instalar dependencias

sh
Copiar
Editar
pip install -r requirements.txt
Ejecutar el servidor

sh
Copiar
Editar
uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
Ejemplos de Uso de la API
Consultar vuelos disponibles

sh
Copiar
Editar
GET http://127.0.0.1:8000/vuelos/
Crear una nueva reserva

sh
Copiar
Editar
POST http://127.0.0.1:8000/reservas/
Content-Type: application/json

{
    "vuelo_id": 1,
    "pasajero": "Juan Pérez",
    "asiento": "12A"
}
Eliminar una reserva

sh
Copiar
Editar
DELETE http://127.0.0.1:8000/reservas/1
Pruebas del Backend
Pruebas Manuales
Abrir http://127.0.0.1:8000/docs en el navegador para probar la API con Swagger.

Enviar solicitudes con Postman o curl y verificar las respuestas.

Pruebas Automáticas
Si deseas agregar pruebas con pytest, crea un archivo test_main.py:

python
Copiar
Editar
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_obtener_vuelos():
    response = client.get("/vuelos/")
    assert response.status_code == 200
    assert isinstance(response.json(), list)
Ejecuta las pruebas con:

sh
Copiar
Editar
pytest test_main.py